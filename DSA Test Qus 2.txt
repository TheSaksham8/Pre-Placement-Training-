/*
Qus 02:-  First Unique Character in a String

Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

Example 1:
Input: s = "leetcode"
Output: 0

Example 2:
Input: s = "loveleetcode"
Output: 2

Example 3:
Input: s = "aabb"
Output: -1

Constraints:
a. 1 <= s.length <= 10^5
b. s consists of only lowercase English letters.
*/
// Code for Example 1 is 
#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;

int firstUniqChar(string s) {
    vector<int> count(26, 0); // Array to store the count of characters
    
    // Count the occurrences of each character
    for (char ch : s) {
        count[ch - 'a']++;
    }
    
    // Find the index of the first non-repeating character
    for (int i = 0; i < s.length(); i++) {
        if (count[s[i] - 'a'] == 1) {
            return i;
        }
    }
    
    return -1; // No non-repeating character found
}

int main() {
    // Example
    string s = "leetcode";
    int index = firstUniqChar(s);
    
    // Print the result
    cout << index << endl;
    
    return 0;
}

// Code for Example 2 is 
#include <iostream>
#include <unordered_map>
using namespace std;

int firstUniqChar(string s) {
    unordered_map<char, int> count; // Hash map to store the count of characters
    
    // Count the occurrences of each character
    for (char ch : s) {
        count[ch]++;
    }
    
    // Find the index of the first non-repeating character
    for (int i = 0; i < s.length(); i++) {
        if (count[s[i]] == 1) {
            return i;
        }
    }
    
    return -1; // No non-repeating character found
}

int main() {
    // Example
    string s = "loveleetcode";
    int index = firstUniqChar(s);
    
    // Print the result
    cout << index << endl;
    
    return 0;
}

// Code for Example 3 is 
#include <iostream>
#include <unordered_map>
using namespace std;

int firstUniqChar(string s) {
    unordered_map<char, int> count; // Hash map to store the count of characters
    
    // Count the occurrences of each character
    for (char ch : s) {
        count[ch]++;
    }
    
    // Find the index of the first non-repeating character
    for (int i = 0; i < s.length(); i++) {
        if (count[s[i]] == 1) {
            return i;
        }
    }
    
    return -1; // No non-repeating character found
}

int main() {
    // Example
    string s = "aabb";
    int index = firstUniqChar(s);
    
    // Print the result
    cout << index << endl;
    
    return 0;
}


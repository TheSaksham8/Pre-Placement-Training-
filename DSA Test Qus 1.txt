/*
Qus 01:-  Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

Example 1:
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

Example 2:
Input: nums = [0]
Output: [0]

Constraints:
a. 1 <= nums.length <= 10^4
b. -2^31 <= nums[i] <= 2^31 - 1
*/
#include <iostream>
#include <vector>
using namespace std;

void moveZeroes(vector<int>& nums) {
    int n = nums.size();
    int j = 0;
    
    // Move non-zero elements to the left side of the array
    for (int i = 0; i < n; i++) {
        if (nums[i] != 0) {
            nums[j] = nums[i];
            j++;
        }
    }
    
    // Fill the remaining positions with zeros
    for (; j < n; j++) {
        nums[j] = 0;
    }
}

int main() {
    // Example usage
    vector<int> nums = {0, 1, 0, 3, 12};
    moveZeroes(nums);
    
    // Print the result
    for (int num : nums) {
        cout << num << " ";
    }
    cout << endl;
    
    return 0;
}

// code for Example 2 is 
#include <iostream>
#include <vector>
using namespace std;

void moveZeroes(vector<int>& nums) {
    int n = nums.size();
    int j = 0;
    
    // Move non-zero elements to the left side of the array
    for (int i = 0; i < n; i++) {
        if (nums[i] != 0) {
            nums[j] = nums[i];
            j++;
        }
    }
    
    // Fill the remaining positions with zeros
    for (; j < n; j++) {
        nums[j] = 0;
    }
}

int main() {
    // Example usage
    vector<int> nums = {0};
    moveZeroes(nums);
    
    // Print the result
    for (int num : nums) {
        cout << num << " ";
    }
    cout << endl;
    
    return 0;
}

/*
<aside>
ðŸ’¡ **Question 1**

Convert 1D Array Into 2D Array

You are given a **0-indexed** 1-dimensional (1D) integer array original, and two integers, m and n. You are tasked with creating a 2-dimensional (2D) array with Â m rows and n columns using **all** the elements from original.

The elements from indices 0 to n - 1 (**inclusive**) of original should form the first row of the constructed 2D array, the elements from indices n to 2 * n - 1 (**inclusive**) should form the second row of the constructed 2D array, and so on.

Return *an* m x n *2D array constructed according to the above procedure, or an empty 2D array if it is impossible*.

**Example 1:**

**Input:** original = [1,2,3,4], m = 2, n = 2

**Output:** [[1,2],[3,4]]

**Explanation:** The constructed 2D array should contain 2 rows and 2 columns.

The first group of n=2 elements in original, [1,2], becomes the first row in the constructed 2D array.

The second group of n=2 elements in original, [3,4], becomes the second row in the constructed 2D array.

</aside>
*/
#include <iostream>
    #include <vector>
    
    std::vector<std::vector<int>> convert1DTo2D(const std::vector<int>& original, int m, int n) {
        std::vector<std::vector<int>> result;
    
        if (original.size() != m * n) {
            return result;
        }
    
        result.resize(m, std::vector<int>(n, 0));
    
        for (int i = 0; i < m * n; i++) {
            int row_index = i / n;
            int column_index = i % n;
            result[row_index][column_index] = original[i];
        }
    
        return result;
    }
    
    int main() {
        std::vector<int> original = {1, 2, 3, 4};
        int m = 2;
        int n = 2;
    
        std::vector<std::vector<int>> result = convert1DTo2D(original, m, n);
    
        for (const auto& row : result) {
            for (int num : row) {
                std::cout << num << " ";
            }
            std::cout << std::endl;
        }
    
        return 0;
    }
    
    /*
    Question 2 You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase **may be** incomplete.

Given the integer n, return *the number of **complete rows** of the staircase you will build*.

**Example 1:**
**Input:** n = 5

**Output:** 2

**Explanation:** Because the 3rd row is incomplete, we return 2.
*/
#include <iostream>
    #include <cmath>
    
    int arrangeCoins(int n) {
        int k = 0;
    
        while ((k * (k + 1)) / 2 <= n) {
            k++;
        }
    
        return k - 1;
    }
    
    int main() {
        int n = 5;
        int result = arrangeCoins(n);
        std::cout << result << std::endl;
    
        return 0;
    }
    
/*
<aside>
ðŸ’¡ **Question 3**

Given an integer array nums sorted in **non-decreasing** order, return *an array of **the squares of each number** sorted in non-decreasing order*.

**Example 1:**

**Input:** nums = [-4,-1,0,3,10]

**Output:** [0,1,9,16,100]

**Explanation:** After squaring, the array becomes [16,1,0,9,100].

After sorting, it becomes [0,1,9,16,100].

</aside>
*/
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>

std::vector<int> sortedSquares(std::vector<int>& nums) {
    std::vector<int> result;

    for (int num : nums) {
        int square = pow(num, 2);
        result.push_back(square);
    }

    std::sort(result.begin(), result.end());

    return result;
}

int main() {
    std::vector<int> nums = {-4, -1, 0, 3, 10};
    std::vector<int> result = sortedSquares(nums);

    for (int num : result) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}

/*<aside>
ðŸ’¡ **Question 4**

Given two **0-indexed** integer arrays nums1 and nums2, return *a list* answer *of size* 2 *where:*

- answer[0] *is a list of all **distinct** integers in* nums1 *which are **not** present in* nums2*.*
- answer[1] *is a list of all **distinct** integers in* nums2 *which are **not** present in* nums1.

**Note** that the integers in the lists may be returned in **any** order.

**Example 1:**

**Input:** nums1 = [1,2,3], nums2 = [2,4,6]

**Output:** [[1,3],[4,6]]

**Explanation:**

For nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. Therefore, answer[0] = [1,3].

For nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums2. Therefore, answer[1] = [4,6].

</aside>
*/
#include <iostream>
#include <vector>
#include <unordered_set>

std::vector<std::vector<int>> findDisjoint(const std::vector<int>& nums1, const std::vector<int>& nums2) {
    std::unordered_set<int> set1(nums1.begin(), nums1.end());
    std::unordered_set<int> set2(nums2.begin(), nums2.end());

    std::vector<int> result1, result2;

    for (int num : set1) {
        if (set2.find(num) == set2.end()) {
            result1.push_back(num);
        }
    }

    for (int num : set2) {
        if (set1.find(num) == set1.end()) {
            result2.push_back(num);
        }
    }

    return {result1, result2};
}

int main() {
    std::vector<int> nums1 = {1, 2, 3};
    std::vector<int> nums2 = {2, 4, 6};

    std::vector<std::vector<int>> result = findDisjoint(nums1, nums2);

    for (const auto& nums : result) {
        std::cout << "[";
        for (int num : nums) {
            std::cout << num << " ";
        }
        std::cout << "]";
    }
    std::cout << std::endl;

    return 0;
}

/*
<aside>
ðŸ’¡ **Question 5**

Given two integer arrays arr1 and arr2, and the integer d, *return the distance value between the two arrays*.

The distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| <= d.

**Example 1:**

**Input:** arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2

**Output:** 2

**Explanation:**

For arr1[0]=4 we have:

|4-10|=6 > d=2

|4-9|=5 > d=2

|4-1|=3 > d=2

|4-8|=4 > d=2

For arr1[1]=5 we have:

|5-10|=5 > d=2

|5-9|=4 > d=2

|5-1|=4 > d=2

|5-8|=3 > d=2

For arr1[2]=8 we have:

**|8-10|=2 <= d=2**

**|8-9|=1 <= d=2**

|8-1|=7 > d=2

**|8-8|=0 <= d=2**

</aside>
*/
#include <iostream>
#include <vector>
#include <cmath>

int findDistanceValue(const std::vector<int>& arr1, const std::vector<int>& arr2, int d) {
    int distanceCount = 0;

    for (int num1 : arr1) {
        bool close = false;

        for (int num2 : arr2) {
            if (std::abs(num1 - num2) <= d) {
                close = true;
                break;
            }
        }

        if (!close) {
            distanceCount++;
        }
    }

    return distanceCount;
}

int main() {
    std::vector<int> arr1 = {4, 5, 8};
    std::vector<int> arr2 = {10, 9, 1, 8};
    int d = 2;

    int distance = findDistanceValue(arr1, arr2, d);
    std::cout << distance << std::endl;

    return 0;
}

/*
<aside>
ðŸ’¡ **Question 6**

Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears **once** or **twice**, return *an array of all the integers that appears **twice***.

You must write an algorithm that runs in O(n) time and uses only constant extra space.

**Example 1:**

**Input:** nums = [4,3,2,7,8,2,3,1]

**Output:**

[2,3]

</aside> 
*/
#include <iostream>
#include <vector>
#include <cmath>

std::vector<int> findDuplicates(const std::vector<int>& nums) {
    std::vector<int> result;

    for (int num : nums) {
        int index = std::abs(num) - 1;

        if (nums[index] > 0) {
            nums[index] *= -1;
        } else {
            result.push_back(std::abs(num));
        }
    }

    return result;
}

int main() {
    std::vector<int> nums = {4, 3, 2, 7, 8, 2, 3, 1};

    std::vector<int> duplicates = findDuplicates(nums);

    std::cout << "[";
    for (int i = 0; i < duplicates.size(); ++i) {
        std::cout << duplicates[i];
        if (i != duplicates.size() - 1) {
            std::cout << ", ";
        }
    }
    std::cout << "]" << std::endl;

    return 0;
}

/*
<aside>
ðŸ’¡ **Question 7**

Suppose an array of length n sorted in ascending order is **rotated** between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

- [4,5,6,7,0,1,2] if it was rotated 4 times.
- [0,1,2,4,5,6,7] if it was rotated 7 times.

Notice that **rotating** an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of **unique** elements, return *the minimum element of this array*.

You must write an algorithm that runs in O(log n) time.

**Example 1:**

**Input:** nums = [3,4,5,1,2]

**Output:** 1

**Explanation:**

The original array was [1,2,3,4,5] rotated 3 times.

</aside>
*/
#include <iostream>
#include <vector>

int findMin(const std::vector<int>& nums) {
    int left = 0;
    int right = nums.size() - 1;

    while (left < right) {
        int mid = left + (right - left) / 2;

        if (nums[mid] > nums[right]) {
            left = mid + 1;
        } else {
            right = mid;
        }
    }

    return nums[left];
}

int main() {
    std::vector<int> nums = {3, 4, 5, 1, 2};

    int minElement = findMin(nums);
    std::cout << minElement << std::endl;

    return 0;
}

/*
<aside>
ðŸ’¡ **Question 8**

An integer array original is transformed into a **doubled** array changed by appending **twice the value** of every element in original, and then randomly **shuffling** the resulting array.

Given an array changed, return original *if* changed *is a **doubled** array. If* changed *is not a **doubled** array, return an empty array. The elements in* original *may be returned in **any** order*.

**Example 1:**

**Input:** changed = [1,3,4,2,6,8]

**Output:** [1,3,4]

**Explanation:** One possible original array could be [1,3,4]:

- Twice the value of 1 is 1 * 2 = 2.
- Twice the value of 3 is 3 * 2 = 6.
- Twice the value of 4 is 4 * 2 = 8.

Other original arrays could be [4,3,1] or [3,1,4].

</aside>
*/
#include <iostream>
#include <vector>
#include <unordered_map>

std::vector<int> findOriginalArray(const std::vector<int>& changed) {
    std::unordered_map<int, int> freqMap;

    // Build frequency map
    for (int num : changed) {
        freqMap[num]++;
    }

    std::vector<int> original;

    // Iterate over the frequency map
    for (const auto& [num, freq] : freqMap) {
        if (freq == 0) {
            continue;
        }

        int doubledNum = num * 2;

        if (freqMap[doubledNum] < freq) {
            return {};  // Not a doubled array
        }

        // Decrement frequencies
        freqMap[num] -= freq;
        freqMap[doubledNum] -= freq;

        // Add original numbers
        for (int i = 0; i < freq; i++) {
            original.push_back(num);
        }
    }

    return original;
}

int main() {
    std::vector<int> changed = {1, 3, 4, 2, 6, 8};

    std::vector<int> original = findOriginalArray(changed);

    if (original.empty()) {
        std::cout << "Empty array" << std::endl;
    } else {
        std::cout << "Original array: ";
        for (int num : original) {
            std::cout << num << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}


//                          *******************************COMPLETE*********************************


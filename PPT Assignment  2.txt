/*
<aside>
ðŸ’¡ **Question 1**
Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2),..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.

**Example 1:**
Input: nums = [1,4,3,2]
Output: 4

**Explanation:** All possible pairings (ignoring the ordering of elements) are:

1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3
2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3
3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4
So the maximum possible sum is 4
</aside>
*/
#include <vector>
#include <algorithm>

int arrayPairSum(std::vector<int>& nums) {
    std::sort(nums.begin(), nums.end());  // Sort the array in ascending order
    int sum = 0;

    // Sum the minimum element of each pair
    for (int i = 0; i < nums.size(); i += 2) {
        sum += nums[i];
    }

    return sum;
}


int main() {
    std::vector<int> nums = { 1, 4, 3, 2 };
    int result = arrayPairSum(nums);
    std::cout << result << std::endl;  // Output: 4

    return 0;
}

/*
Question 2
Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor. 

The doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice. 

Given the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.

Example 1:
Input: candyType = [1,1,2,2,3,3]
Output: 3

Explanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.
*/
#include <vector>
#include <unordered_set>
#include <algorithm>

int distributeCandies(std::vector<int>& candyType) {
    int n = candyType.size();
    int maxTypes = n / 2;

    // Create an unordered_set to store the unique types of candies
    std::unordered_set<int> uniqueTypes(candyType.begin(), candyType.end());

    // Return the minimum of unique types and maxTypes
    return std::min(uniqueTypes.size(), maxTypes);
}


int main() {
    std::vector<int> candyType = { 1, 1, 2, 2, 3, 3 };
    int result = distributeCandies(candyType);
    std::cout << result << std::endl;  // Output: 3

    return 0;
}

/*
Question 3
We define a harmonious array as an array where the difference between its maximum value
and its minimum value is exactly 1.

Given an integer array nums, return the length of its longest harmonious subsequence
among all its possible subsequences.

A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.

Example 1:
Input: nums = [1,3,2,2,5,2,3,7]
Output: 5

Explanation: The longest harmonious subsequence is [3,2,2,2,3].
*/
#include <vector>
#include <unordered_map>
#include <algorithm>

int findLHS(std::vector<int>& nums) {
    std::unordered_map<int, int> frequency;

    // Count the frequency of each number in nums
    for (int num : nums) {
        frequency[num]++;
    }

    int longestSubsequence = 0;

    // Iterate through the unique numbers in nums
    for (auto it = frequency.begin(); it != frequency.end(); ++it) {
        int currentNumber = it->first;
        int currentFrequency = it->second;

        // Check if the current number and its adjacent number form a harmonious subsequence
        if (frequency.count(currentNumber + 1) > 0) {
            int harmoniousSubsequenceLength = currentFrequency + frequency[currentNumber + 1];
            longestSubsequence = std::max(longestSubsequence, harmoniousSubsequenceLength);
        }
    }

    return longestSubsequence;
}


int main() {
    std::vector<int> nums = {1, 3, 2, 2, 5, 2, 3, 7};
    int result = findLHS(nums);
    std::cout << result << std::endl;  // Output: 5

    return 0;
}

/*
Question 4
You have a long flowerbed in which some of the plots are planted, and some are not.
However, flowers cannot be planted in adjacent plots.
Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise.

Example 1:
Input: flowerbed = [1,0,0,0,1], n = 1
Output: true
*/
#include <vector>

bool canPlaceFlowers(std::vector<int>& flowerbed, int n) {
    int count = 0;
    int size = flowerbed.size();
    int i = 0;

    while (i < size) {
        if (flowerbed[i] == 0 && (i == 0 || flowerbed[i - 1] == 0) && (i == size - 1 || flowerbed[i + 1] == 0)) {
            flowerbed[i] = 1;
            count++;
        }

        if (count >= n) {
            return true;
        }

        i++;
    }

    return false;
}


int main() {
    std::vector<int> flowerbed = {1, 0, 0, 0, 1};
    int n = 1;
    bool result = canPlaceFlowers(flowerbed, n);
    std::cout << std::boolalpha << result << std::endl;  // Output: true

    return 0;
}

/*
Question 5
Given an integer array nums, find three numbers whose product is maximum and return the maximum product.

Example 1:
Input: nums = [1,2,3]
Output: 6
*/
#include <vector>
#include <algorithm>

int maximumProduct(std::vector<int>& nums) {
    int n = nums.size();

    // Sort the array in ascending order
    std::sort(nums.begin(), nums.end());

    // Return the maximum of two possible products:
    // - The product of the three largest elements
    // - The product of the two smallest elements and the largest element
    return std::max(nums[n - 1] * nums[n - 2] * nums[n - 3], nums[0] * nums[1] * nums[n - 1]);
}


int main() {
    std::vector<int> nums = {1, 2, 3};
    int result = maximumProduct(nums);
    std::cout << result << std::endl;  // Output: 6

    return 0;
}

/*
Question 6
Given an array of integers nums which is sorted in ascending order, and an integer target,
write a function to search target in nums. If target exists, then return its index. Otherwise,
return -1.

You must write an algorithm with O(log n) runtime complexity.

Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4

Explanation: 9 exists in nums and its index is 4
*/
#include <vector>

int search(std::vector<int>& nums, int target) {
    int left = 0;
    int right = nums.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (nums[mid] == target) {
            return mid;
        } else if (nums[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    return -1;
}


int main() {
    std::vector<int> nums = {-1, 0, 3, 5, 9, 12};
    int target = 9;
    int result = search(nums, target);
    std::cout << result << std::endl;  // Output: 4

    return 0;
}

/*
Question 7
An array is monotonic if it is either monotone increasing or monotone decreasing.

An array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. An array nums is
monotone decreasing if for all i <= j, nums[i] >= nums[j].

Given an integer array nums, return true if the given array is monotonic, or false otherwise.

Example 1:
Input: nums = [1,2,2,3]
Output: true
*/
#include <vector>

bool isMonotonic(std::vector<int>& nums) {
    bool increasing = true;
    bool decreasing = true;

    for (int i = 1; i < nums.size(); i++) {
        if (nums[i] < nums[i - 1]) {
            increasing = false;
        }
        if (nums[i] > nums[i - 1]) {
            decreasing = false;
        }
    }

    return increasing || decreasing;
}


int main() {
    std::vector<int> nums = {1, 2, 2, 3};
    bool result = isMonotonic(nums);
    std::cout << std::boolalpha << result << std::endl;  // Output: true

    return 0;
}

/*
Question 8
You are given an integer array nums and an integer k.

In one operation, you can choose any index i where 0 <= i < nums.length and change nums[i] to nums[i] + x where x is an integer from the range [-k, k]. You can apply this operation at most once for each index i.

The score of nums is the difference between the maximum and minimum elements in nums.

Return the minimum score of nums after applying the mentioned operation at most once for each index in it.

Example 1:
Input: nums = [1], k = 0
Output: 0

Explanation: The score is max(nums) - min(nums) = 1 - 1 = 0.
*/
#include <vector>
#include <algorithm>

int minimumScore(std::vector<int>& nums, int k) {
    int n = nums.size();
    std::sort(nums.begin(), nums.end());

    int minScore = nums[n - 1] - nums[0];  // Initial score without any operations

    // Check the score after applying the operation to each element
    for (int i = 0; i < n - 1; i++) {
        int high = std::max(nums[i] + k, nums[n - 1] - k);
        int low = std::min(nums[0] + k, nums[i + 1] - k);
        minScore = std::min(minScore, high - low);
    }

    return minScore;
}


int main() {
    std::vector<int> nums = {1};
    int k = 0;
    int result = minimumScore(nums, k);
    std::cout << result << std::endl;  // Output: 0

    return 0;
}


//                          *******************************COMPLETE*********************************

/*
Question 1
Given an integer array nums of length n and an integer target, find three integers
in nums such that the sum is closest to the target.
Return the sum of the three integers.

You may assume that each input would have exactly one solution.

Example 1:
Input: nums = [-1,2,1,-4], target = 1
Output: 2

Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
*/
#include <vector>
#include <algorithm>
#include <climits>

int threeSumClosest(std::vector<int>& nums, int target) {
    int n = nums.size();
    int closestSum = INT_MAX;  // Initialize with a large value

    std::sort(nums.begin(), nums.end());  // Sort the array in ascending order

    for (int i = 0; i < n - 2; i++) {
        int left = i + 1;
        int right = n - 1;

        while (left < right) {
            int sum = nums[i] + nums[left] + nums[right];

            // Update closestSum if the current sum is closer to the target
            if (std::abs(sum - target) < std::abs(closestSum - target)) {
                closestSum = sum;
            }

            if (sum < target) {
                left++;  // Increase the sum by moving left pointer to the right
            } else if (sum > target) {
                right--;  // Decrease the sum by moving right pointer to the left
            } else {
                return sum;  // Exact sum found, return it
            }
        }
    }

    return closestSum;
}


int main() {
    std::vector<int> nums = {-1, 2, 1, -4};
    int target = 1;
    int result = threeSumClosest(nums, target);
    std::cout << result << std::endl;  // Output: 2

    return 0;
}

/*
Question 2
Given an array nums of n integers, return an array of all the unique quadruplets
[nums[a], nums[b], nums[c], nums[d]] such that:
           ‚óè 0 <= a, b, c, d < n
           ‚óè a, b, c, and d are distinct.
           ‚óè nums[a] + nums[b] + nums[c] + nums[d] == target

You may return the answer in any order.

Example 1:
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
*/
#include <vector>
#include <algorithm>

std::vector<std::vector<int>> fourSum(std::vector<int>& nums, int target) {
    std::vector<std::vector<int>> result;
    int n = nums.size();

    if (n < 4) {
        return result;  // Not enough elements to form a quadruplet
    }

    std::sort(nums.begin(), nums.end());  // Sort the array in ascending order

    for (int i = 0; i < n - 3; i++) {
        // Skip duplicates
        if (i > 0 && nums[i] == nums[i - 1]) {
            continue;
        }

        for (int j = i + 1; j < n - 2; j++) {
            // Skip duplicates
            if (j > i + 1 && nums[j] == nums[j - 1]) {
                continue;
            }

            int left = j + 1;
            int right = n - 1;

            while (left < right) {
                int sum = nums[i] + nums[j] + nums[left] + nums[right];

                if (sum < target) {
                    left++;  // Increase the sum by moving left pointer to the right
                } else if (sum > target) {
                    right--;  // Decrease the sum by moving right pointer to the left
                } else {
                    result.push_back({nums[i], nums[j], nums[left], nums[right]});
                    left++;
                    right--;

                    // Skip duplicates
                    while (left < right && nums[left] == nums[left - 1]) {
                        left++;
                    }
                    while (left < right && nums[right] == nums[right + 1]) {
                        right--;
                    }
                }
            }
        }
    }

    return result;
}


int main() {
    std::vector<int> nums = {1, 0, -1, 0, -2, 2};
    int target = 0;
    std::vector<std::vector<int>> result = fourSum(nums, target);
    for (const auto& quadruplet : result) {
        for (int num : quadruplet) {
            std::cout << num << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}

/*
<aside>
üí° **Question 3**
A permutation of an array of integers is an arrangement of its members into a
sequence or linear order.

For example, for arr = [1,2,3], the following are all the permutations of arr:
[1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].

The next permutation of an array of integers is the next lexicographically greater
permutation of its integer. More formally, if all the permutations of the array are
sorted in one container according to their lexicographical order, then the next
permutation of that array is the permutation that follows it in the sorted container.

If such an arrangement is not possible, the array must be rearranged as the
lowest possible order (i.e., sorted in ascending order).

‚óè For example, the next permutation of arr = [1,2,3] is [1,3,2].
‚óè Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
‚óè While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not
have a lexicographical larger rearrangement.

Given an array of integers nums, find the next permutation of nums.
The replacement must be in place and use only constant extra memory.

**Example 1:**
Input: nums = [1,2,3]
Output: [1,3,2]

</aside>
*/
#include <vector>
#include <algorithm>

void nextPermutation(std::vector<int>& nums) {
    int n = nums.size();
    int i = n - 2;

    // Find the first decreasing element from the right
    while (i >= 0 && nums[i] >= nums[i + 1]) {
        i--;
    }

    if (i >= 0) {
        int j = n - 1;

        // Find the first element greater than nums[i] from the right
        while (j >= 0 && nums[j] <= nums[i]) {
            j--;
        }

        std::swap(nums[i], nums[j]);
    }

    // Reverse the elements from i+1 to the end
    std::reverse(nums.begin() + i + 1, nums.end());
}


int main() {
    std::vector<int> nums = {1, 2, 3};
    nextPermutation(nums);
    for (int num : nums) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}

/*
Question 4
Given a sorted array of distinct integers and a target value, return the index if the
target is found. If not, return the index where it would be if it were inserted in
order.

You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [1,3,5,6], target = 5
Output: 2
*/
#include <vector>

int searchInsert(std::vector<int>& nums, int target) {
    int left = 0;
    int right = nums.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (nums[mid] == target) {
            return mid;
        } else if (nums[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    // If the target is not found, left will be the index where it should be inserted
    return left;
}


int main() {
    std::vector<int> nums = {1, 3, 5, 6};
    int target = 5;
    int index = searchInsert(nums, target);
    std::cout << index << std::endl;  // Output: 2

    return 0;
}

/*
<aside>
üí° **Question 5**
You are given a large integer represented as an integer array digits, where each
digits[i] is the ith digit of the integer. The digits are ordered from most significant
to least significant in left-to-right order. The large integer does not contain any
leading 0's.

Increment the large integer by one and return the resulting array of digits.

**Example 1:**
Input: digits = [1,2,3]
Output: [1,2,4]

**Explanation:** The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].

</aside>
*/
#include <vector>

std::vector<int> plusOne(std::vector<int>& digits) {
    int n = digits.size();

    // Start from the least significant digit
    for (int i = n - 1; i >= 0; i--) {
        // Increment the current digit by one
        digits[i]++;

        // If the current digit becomes 10, set it to 0 and carry over the one
        if (digits[i] == 10) {
            digits[i] = 0;
        } else {
            // If the current digit is less than 10, no need to carry over, so return the digits
            return digits;
        }
    }

    // If we reach here, it means all digits were 9 and carried over to become 0
    // In this case, we need to insert a new digit 1 at the beginning
    digits.insert(digits.begin(), 1);

    return digits;
}


int main() {
    std::vector<int> digits = {1, 2, 3};
    std::vector<int> result = plusOne(digits);

    // Print the resulting array
    for (int digit : result) {
        std::cout << digit << " ";
    }
    std::cout << std::endl;  // Output: 1 2 4

    return 0;
}

/*
Question 6
Given a non-empty array of integers nums, every element appears twice except
for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only
constant extra space.

Example 1:
Input: nums = [2,2,1]
Output: 1
*/
#include <vector>

int singleNumber(std::vector<int>& nums) {
    int result = 0;
    
    for (int num : nums) {
        result ^= num;
    }
    
    return result;
}


int main() {
    std::vector<int> nums = {2, 2, 1};
    int result = singleNumber(nums);
    
    std::cout << result << std::endl;  // Output: 1
    
    return 0;
}

/*
Question 7
You are given an inclusive range [lower, upper] and a sorted unique integer array
nums, where all elements are within the inclusive range.

A number x is considered missing if x is in the range [lower, upper] and x is not in
nums.

Return the shortest sorted list of ranges that exactly covers all the missing
numbers. That is, no element of nums is included in any of the ranges, and each
missing number is covered by one of the ranges.

Example 1:
Input: nums = [0,1,3,50,75], lower = 0, upper = 99
Output: [[2,2],[4,49],[51,74],[76,99]]

Explanation: The ranges are:
[2,2]
[4,49]
[51,74]
[76,99]
*/
#include <vector>
#include <string>

std::vector<std::string> findMissingRanges(std::vector<int>& nums, int lower, int upper) {
    std::vector<std::string> ranges;
    
    long long next = lower;
    
    for (int num : nums) {
        if (num > next) {
            ranges.push_back(getRange(next, num - 1));
        }
        next = (long long)num + 1;
    }
    
    if (next <= upper) {
        ranges.push_back(getRange(next, upper));
    }
    
    return ranges;
}

std::string getRange(long long start, long long end) {
    if (start == end) {
        return std::to_string(start);
    } else {
        return std::to_string(start) + "->" + std::to_string(end);
    }
}


int main() {
    std::vector<int> nums = {0, 1, 3, 50, 75};
    int lower = 0;
    int upper = 99;
    
    std::vector<std::string> result = findMissingRanges(nums, lower, upper);
    
    for (const std::string& range : result) {
        std::cout << range << " ";
    }
    // Output: [2,2] [4,49] [51,74] [76,99]
    
    return 0;
}

/*
Question 8
Given an array of meeting time intervals where intervals[i] = [starti, endi],
determine if a person could attend all meetings.

Example 1:
Input: intervals = [[0,30],[5,10],[15,20]]
Output: false
*/
#include <vector>
#include <algorithm>

bool canAttendMeetings(std::vector<std::vector<int>>& intervals) {
    // Sort the intervals based on the start time
    std::sort(intervals.begin(), intervals.end(), [](const auto& a, const auto& b) {
        return a[0] < b[0];
    });
    
    // Check for overlapping intervals
    for (int i = 1; i < intervals.size(); i++) {
        if (intervals[i][0] < intervals[i - 1][1]) {
            return false; // Overlapping intervals found
        }
    }
    
    return true; // No overlapping intervals found
}


int main() {
    std::vector<std::vector<int>> intervals = {{0, 30}, {5, 10}, {15, 20}};
    
    bool result = canAttendMeetings(intervals);
    
    std::cout << std::boolalpha << result << std::endl; // Output: false
    
    return 0;
}



//                          *******************************COMPLETE*********************************

/*
<aside>
ðŸ’¡ **Question 1**
Given three integer arrays arr1, arr2 and arr3 **sorted** in **strictly increasing** order, return a sorted array of **only** the integers that appeared in **all** three arrays.

**Example 1:**

Input: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]

Output: [1,5]

**Explanation:** Only 1 and 5 appeared in the three arrays.

</aside>
*/
#include <vector>

std::vector<int> arraysIntersection(std::vector<int>& arr1, std::vector<int>& arr2, std::vector<int>& arr3) {
    std::vector<int> result;
    int i = 0, j = 0, k = 0; // Pointers for the three arrays
    
    // Iterate until any of the pointers reaches the end of its array
    while (i < arr1.size() && j < arr2.size() && k < arr3.size()) {
        // If the current elements in all three arrays are equal, add it to the result
        if (arr1[i] == arr2[j] && arr2[j] == arr3[k]) {
            result.push_back(arr1[i]);
            i++;
            j++;
            k++;
        }
        // Move the pointers in the respective arrays to reach the next potential common element
        else if (arr1[i] <= arr2[j] && arr1[i] <= arr3[k]) {
            i++;
        } else if (arr2[j] <= arr1[i] && arr2[j] <= arr3[k]) {
            j++;
        } else {
            k++;
        }
    }
    
    return result;
}

// Example usage
int main() {
    std::vector<int> arr1 = {1, 2, 3, 4, 5};
    std::vector<int> arr2 = {1, 2, 5, 7, 9};
    std::vector<int> arr3 = {1, 3, 4, 5, 8};
    
    std::vector<int> result = arraysIntersection(arr1, arr2, arr3);
    
    for (int num : result) {
        std::cout << num << " ";
    }
    std::cout << std::endl; // Output: 1 5
    
    return 0;
}

/*
<aside>
ðŸ’¡ **Question 2**

Given two **0-indexed** integer arrays nums1 and nums2, return *a list* answer *of size* 2 *where:*

- answer[0] *is a list of all **distinct** integers in* nums1 *which are **not** present in* nums2*.*
- answer[1] *is a list of all **distinct** integers in* nums2 *which are **not** present in* nums1.

**Note** that the integers in the lists may be returned in **any** order.

**Example 1:**

**Input:** nums1 = [1,2,3], nums2 = [2,4,6]

**Output:** [[1,3],[4,6]]

**Explanation:**

For nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. Therefore, answer[0] = [1,3].

For nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums2. Therefore, answer[1] = [4,6].

</aside>
*/
#include <iostream>
#include <vector>
#include <unordered_set>

std::vector<std::vector<int>> findMissingNumbers(const std::vector<int>& nums1, const std::vector<int>& nums2) {
    std::vector<std::vector<int>> answer(2);
    std::unordered_set<int> set1(nums1.begin(), nums1.end());
    std::unordered_set<int> set2(nums2.begin(), nums2.end());

    for (int num : nums1) {
        if (set2.find(num) == set2.end()) {
            answer[0].push_back(num);
        }
    }

    for (int num : nums2) {
        if (set1.find(num) == set1.end()) {
            answer[1].push_back(num);
        }
    }

    return answer;
}

int main() {
    std::vector<int> nums1 = {1, 2, 3};
    std::vector<int> nums2 = {2, 4, 6};

    std::vector<std::vector<int>> answer = findMissingNumbers(nums1, nums2);

    std::cout << "Distinct numbers in nums1 not present in nums2: ";
    for (int num : answer[0]) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    std::cout << "Distinct numbers in nums2 not present in nums1: ";
    for (int num : answer[1]) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}

/*
<aside>
ðŸ’¡ **Question 3**
Given a 2D integer array matrix, return *the **transpose** of* matrix.

The **transpose** of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.

**Example 1:**

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]

Output: [[1,4,7],[2,5,8],[3,6,9]]

</aside>
*/
#include <iostream>
#include <vector>

std::vector<std::vector<int>> transposeMatrix(const std::vector<std::vector<int>>& matrix) {
    int rows = matrix.size();
    int columns = matrix[0].size();

    std::vector<std::vector<int>> transpose(columns, std::vector<int>(rows, 0));

    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < columns; ++j) {
            transpose[j][i] = matrix[i][j];
        }
    }

    return transpose;
}

int main() {
    std::vector<std::vector<int>> matrix = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };

    std::vector<std::vector<int>> transpose = transposeMatrix(matrix);

    std::cout << "Transpose of the matrix:" << std::endl;
    for (const auto& row : transpose) {
        for (int num : row) {
            std::cout << num << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}

/*
<aside>
ðŸ’¡ **Question 4**
Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is **maximized**. Return *the maximized sum*.

**Example 1:**

Input: nums = [1,4,3,2]

Output: 4

**Explanation:** All possible pairings (ignoring the ordering of elements) are:

1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3

2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3

3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4

So the maximum possible sum is 4.

</aside>
*/
#include <iostream>
#include <vector>
#include <algorithm>

int arrayPairSum(const std::vector<int>& nums) {
    int n = nums.size() / 2;
    int sum = 0;

    std::vector<int> sortedNums = nums;
    std::sort(sortedNums.begin(), sortedNums.end());

    for (int i = 0; i < 2 * n; i += 2) {
        sum += sortedNums[i];
    }

    return sum;
}

int main() {
    std::vector<int> nums = {1, 4, 3, 2};

    int maxSum = arrayPairSum(nums);

    std::cout << "Maximum possible sum: " << maxSum << std::endl;

    return 0;
}

/*
<aside>
ðŸ’¡ **Question 5**
You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase **may be** incomplete.

Given the integer n, return *the number of **complete rows** of the staircase you will build*.

**Example 1:**

[]()

![v2.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4bd91cfa-d2b1-47b3-8197-a72e8dcfff4b/v2.jpg)

**Input:** n = 5

**Output:** 2

**Explanation:** Because the 3rd row is incomplete, we return 2.

</aside>

*/
#include <iostream>
#include <cmath>

int arrangeCoins(int n) {
    return static_cast<int>((-1 + std::sqrt(1 + 8LL * n)) / 2);
}

int main() {
    int n = 5;
    int completeRows = arrangeCoins(n);

    std::cout << "Number of complete rows: " << completeRows << std::endl;

    return 0;
}

/*
<aside>
ðŸ’¡ **Question 6**
Given an integer array nums sorted in **non-decreasing** order, return *an array of **the squares of each number** sorted in non-decreasing order*.

**Example 1:**

Input: nums = [-4,-1,0,3,10]

Output: [0,1,9,16,100]

**Explanation:** After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100]

</aside>
*/
#include <iostream>
#include <vector>
#include <algorithm>

std::vector<int> sortedSquares(const std::vector<int>& nums) {
    int n = nums.size();
    std::vector<int> result(n);

    int left = 0;
    int right = n - 1;
    int index = n - 1;

    while (left <= right) {
        int leftSquare = nums[left] * nums[left];
        int rightSquare = nums[right] * nums[right];

        if (leftSquare > rightSquare) {
            result[index] = leftSquare;
            left++;
        } else {
            result[index] = rightSquare;
            right--;
        }

        index--;
    }

    return result;
}

int main() {
    std::vector<int> nums = {-4, -1, 0, 3, 10};

    std::vector<int> squaredSorted = sortedSquares(nums);

    std::cout << "Sorted squares: ";
    for (int num : squaredSorted) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}

/*
<aside>
ðŸ’¡ **Question 7**
You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.

Count and return *the number of maximum integers in the matrix after performing all the operations*

**Example 1:**

![q4.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4d0890d0-7bc7-4f59-be8e-352d9f3c1c52/q4.jpg)

**Input:** m = 3, n = 3, ops = [[2,2],[3,3]]

**Output:** 4

**Explanation:** The maximum integer in M is 2, and there are four of it in M. So return 4.

</aside>
*/
#include <iostream>
#include <vector>
#include <algorithm>

int maxCount(int m, int n, const std::vector<std::vector<int>>& ops) {
    int minX = m;
    int minY = n;

    for (const auto& op : ops) {
        minX = std::min(minX, op[0]);
        minY = std::min(minY, op[1]);
    }

    return minX * minY;
}

int main() {
    int m = 3;
    int n = 3;
    std::vector<std::vector<int>> ops = {{2, 2}, {3, 3}};

    int count = maxCount(m, n, ops);

    std::cout << "Number of maximum integers: " << count << std::endl;

    return 0;
}

/*
<aside>
ðŸ’¡ **Question 8**

Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].

*Return the array in the form* [x1,y1,x2,y2,...,xn,yn].

**Example 1:**

**Input:** nums = [2,5,1,3,4,7], n = 3

**Output:** [2,3,5,4,1,7]

**Explanation:** Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].

</aside>
*/
#include <iostream>
#include <vector>

std::vector<int> shuffle(const std::vector<int>& nums, int n) {
    std::vector<int> result(2 * n);

    for (int i = 0; i < n; i++) {
        result[2 * i] = nums[i]; // Assign xi
        result[2 * i + 1] = nums[n + i]; // Assign yi
    }

    return result;
}

int main() {
    std::vector<int> nums = {2, 5, 1, 3, 4, 7};
    int n = 3;

    std::vector<int> shuffled = shuffle(nums, n);

    std::cout << "Shuffled array: ";
    for (int num : shuffled) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}

//                          *******************************COMPLETE*********************************

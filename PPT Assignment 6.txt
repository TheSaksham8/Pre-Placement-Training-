/*
<aside>
ðŸ’¡ **Question 1**

A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:

- s[i] == 'I' if perm[i] < perm[i + 1], and
- s[i] == 'D' if perm[i] > perm[i + 1].

Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return **any of them**.

**Example 1:**

**Input:** s = "IDID"

**Output:**

[0,4,1,3,2]

</aside>
*/
#include <iostream>
#include <vector>

std::vector<int> reconstructPermutation(const std::string& s) {
    std::vector<int> perm;
    int n = 0;
    int m = s.length();

    for (char ch : s) {
        if (ch == 'I') {
            perm.push_back(n);
            n++;
        } else if (ch == 'D') {
            perm.push_back(m);
            m--;
        }
    }

    perm.push_back(n);

    return perm;
}

int main() {
    std::string s = "IDID";

    std::vector<int> perm = reconstructPermutation(s);

    std::cout << "Permutation: ";
    for (int num : perm) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}

/*
<aside>
ðŸ’¡ **Question 2**

You are given an m x n integer matrix matrix with the following two properties:

- Each row is sorted in non-decreasing order.
- The first integer of each row is greater than the last integer of the previous row.

Given an integer target, return true *if* target *is in* matrix *or* false *otherwise*.

You must write a solution in O(log(m * n)) time complexity.

**Example 1:**

**Input:** matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3

**Output:** true
*/
#include <iostream>
#include <vector>

bool searchMatrix(const std::vector<std::vector<int>>& matrix, int target) {
    int rows = matrix.size();
    int cols = matrix[0].size();
    int left = 0;
    int right = rows * cols - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;
        int midValue = matrix[mid / cols][mid % cols];

        if (midValue == target) {
            return true;
        } else if (midValue < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    return false;
}

int main() {
    std::vector<std::vector<int>> matrix = {{1, 3, 5, 7}, {10, 11, 16, 20}, {23, 30, 34, 60}};
    int target = 3;

    bool found = searchMatrix(matrix, target);

    std::cout << (found ? "true" : "false") << std::endl;

    return 0;
}

/*
<aside>
ðŸ’¡ **Question 3**

Given an array of integers arr, return *true if and only if it is a valid mountain array*.

Recall that arr is a mountain array if and only if:

- arr.length >= 3
- There exists some i with 0 < i < arr.length - 1 such that:
    - arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
    - arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
**Example 1:**

**Input:** arr = [2,1]

**Output:**

false
*/
#include <iostream>
#include <vector>

bool validMountainArray(const std::vector<int>& arr) {
    int n = arr.size();
    if (n < 3) {
        return false;
    }

    int i = 0;

    // Check the increasing sequence
    while (i < n - 1 && arr[i] < arr[i + 1]) {
        i++;
    }

    // Check if there is a peak
    if (i == 0 || i == n - 1) {
        return false;
    }

    // Check the decreasing sequence
    while (i < n - 1 && arr[i] > arr[i + 1]) {
        i++;
    }

    return i == n - 1;
}

int main() {
    std::vector<int> arr = {2, 1};

    bool isValidMountain = validMountainArray(arr);

    std::cout << (isValidMountain ? "true" : "false") << std::endl;

    return 0;
}

/*
<aside>
ðŸ’¡ **Question 4**

Given a binary array nums, return *the maximum length of a contiguous subarray with an equal number of* 0 *and* 1.

**Example 1:**

**Input:** nums = [0,1]

**Output:** 2

**Explanation:**

[0, 1] is the longest contiguous subarray with an equal number of 0 and 1.

*/
#include <iostream>
#include <unordered_map>
#include <vector>

int findMaxLength(const std::vector<int>& nums) {
    int maxLength = 0;
    int count = 0;
    std::unordered_map<int, int> countMap;
    countMap[0] = -1;

    for (int i = 0; i < nums.size(); i++) {
        count += nums[i] == 1 ? 1 : -1;

        if (countMap.find(count) != countMap.end()) {
            maxLength = std::max(maxLength, i - countMap[count]);
        } else {
            countMap[count] = i;
        }
    }

    return maxLength;
}

int main() {
    std::vector<int> nums = {0, 1};

    int maxLength = findMaxLength(nums);

    std::cout << maxLength << std::endl;

    return 0;
}

/*
<aside>
ðŸ’¡ **Question 5**

The **product sum** of two equal-length arrays a and b is equal to the sum of a[i] * b[i] for all 0 <= i < a.length (**0-indexed**).

- For example, if a = [1,2,3,4] and b = [5,2,3,1], the **product sum** would be 1*5 + 2*2 + 3*3 + 4*1 = 22.

Given two arrays nums1 and nums2 of length n, return *the **minimum product sum** if you are allowed to **rearrange** the **order** of the elements in* nums1.

**Example 1:**

**Input:** nums1 = [5,3,4,2], nums2 = [4,2,2,5]

**Output:** 40

**Explanation:**

We can rearrange nums1 to become [3,5,4,2]. The product sum of [3,5,4,2] and [4,2,2,5] is 3*4 + 5*2 + 4*2 + 2*5 = 40.

*/
#include <iostream>
#include <algorithm>
#include <vector>

int minProductSum(std::vector<int>& nums1, std::vector<int>& nums2) {
    std::sort(nums1.begin(), nums1.end());
    std::sort(nums2.rbegin(), nums2.rend());

    int sum = 0;
    for (int i = 0; i < nums1.size(); i++) {
        sum += nums1[i] * nums2[i];
    }

    return sum;
}

int main() {
    std::vector<int> nums1 = {5, 3, 4, 2};
    std::vector<int> nums2 = {4, 2, 2, 5};

    int minProduct = minProductSum(nums1, nums2);

    std::cout << minProduct << std::endl;

    return 0;
}

/*
<aside>
ðŸ’¡ **Question 6**

An integer array original is transformed into a **doubled** array changed by appending **twice the value** of every element in original, and then randomly **shuffling** the resulting array.

Given an array changed, return original *if* changed *is a **doubled** array. If* changed *is not a **doubled** array, return an empty array. The elements in* original *may be returned in **any** order*.

**Example 1:**

**Input:** changed = [1,3,4,2,6,8]

**Output:** [1,3,4]

**Explanation:** One possible original array could be [1,3,4]:

- Twice the value of 1 is 1 * 2 = 2.
- Twice the value of 3 is 3 * 2 = 6.
- Twice the value of 4 is 4 * 2 = 8.

Other original arrays could be [4,3,1] or [3,1,4].

</aside>
*/
#include <iostream>
#include <unordered_map>
#include <vector>

std::vector<int> findOriginalArray(std::vector<int>& changed) {
    std::unordered_map<int, int> freq;
    std::vector<int> original;

    // Count the frequency of each element in changed
    for (int num : changed) {
        freq[num]++;
    }

    // Traverse the changed array and reconstruct the original array
    for (int num : changed) {
        if (freq[num] == 0) {
            continue;  // Skip if the current element has already been used
        }
        if (freq[2 * num] == 0) {
            return {};  // If the double of current element is not found, return an empty array
        }

        // Add the current element to the original array
        original.push_back(num);

        // Decrement the frequencies of current element and its double in the map
        freq[num]--;
        freq[2 * num]--;
    }

    return original;
}

int main() {
    std::vector<int> changed = {1, 3, 4, 2, 6, 8};
    std::vector<int> original = findOriginalArray(changed);

    if (original.empty()) {
        std::cout << "No valid original array found." << std::endl;
    } else {
        std::cout << "Original array: ";
        for (int num : original) {
            std::cout << num << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}


/*
ðŸ’¡ **Question 7**

Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.

**Example 1:**

**Input:** n = 3

**Output:** [[1,2,3],[8,9,4],[7,6,5]]
*/
#include <iostream>
#include <vector>

std::vector<std::vector<int>> generateMatrix(int n) {
    std::vector<std::vector<int>> matrix(n, std::vector<int>(n, 0));

    int num = 1;  // Starting number
    int rowBegin = 0, rowEnd = n - 1;
    int colBegin = 0, colEnd = n - 1;

    while (rowBegin <= rowEnd && colBegin <= colEnd) {
        // Fill the top row
        for (int i = colBegin; i <= colEnd; i++) {
            matrix[rowBegin][i] = num++;
        }
        rowBegin++;

        // Fill the right column
        for (int i = rowBegin; i <= rowEnd; i++) {
            matrix[i][colEnd] = num++;
        }
        colEnd--;

        // Fill the bottom row
        if (rowBegin <= rowEnd) {
            for (int i = colEnd; i >= colBegin; i--) {
                matrix[rowEnd][i] = num++;
            }
            rowEnd--;
        }

        // Fill the left column
        if (colBegin <= colEnd) {
            for (int i = rowEnd; i >= rowBegin; i--) {
                matrix[i][colBegin] = num++;
            }
            colBegin++;
        }
    }

    return matrix;
}

int main() {
    int n = 3;
    std::vector<std::vector<int>> matrix = generateMatrix(n);

    // Print the generated matrix
    for (const auto& row : matrix) {
        for (int num : row) {
            std::cout << num << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}


/*
<aside>
ðŸ’¡ **Question 8**

Given two [sparse matrices](https://en.wikipedia.org/wiki/Sparse_matrix) mat1 of size m x k and mat2 of size k x n, return the result of mat1 x mat2. You may assume that multiplication is always possible.

**Example 1:**

**Input:** mat1 = [[1,0,0],[-1,0,3]], mat2 = [[7,0,0],[0,0,0],[0,0,1]]

**Output:**

[[7,0,0],[-7,0,3]]
*/
#include <iostream>
#include <vector>

std::vector<std::vector<int>> multiply(std::vector<std::vector<int>>& mat1, std::vector<std::vector<int>>& mat2) {
    int m = mat1.size();
    int k = mat1[0].size();
    int n = mat2[0].size();

    std::vector<std::vector<int>> result(m, std::vector<int>(n, 0));

    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            for (int x = 0; x < k; x++) {
                result[i][j] += mat1[i][x] * mat2[x][j];
            }
        }
    }

    return result;
}

int main() {
    std::vector<std::vector<int>> mat1 = {{1, 0, 0}, {-1, 0, 3}};
    std::vector<std::vector<int>> mat2 = {{7, 0, 0}, {0, 0, 0}, {0, 0, 1}};

    std::vector<std::vector<int>> result = multiply(mat1, mat2);

    // Print the resulting matrix
    for (const auto& row : result) {
        for (int num : row) {
            std::cout << num << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}


//                          *******************************COMPLETE*********************************
